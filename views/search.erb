<!DOCTYPE html>
<html>
  <head>
  	<title>CocoaPods: The Objective-C Library Manager</title>
  	<link href="stylesheets/css/cocoapods.css" media="screen" rel="stylesheet" type="text/css">
  	<link href="stylesheets/select.css" media="screen" rel="stylesheet" type="text/css">
    <link href="stylesheets/prettify.css" media="screen" rel="stylesheet" type="text/css">
  	<!-- <link rel="stylesheet" href="stylesheets/picky.css"> -->
  	<link rel="shortcut icon" href="favicon.ico">
  </head>

  <body>
		<div class="container">
			<div class="sidebar">
				<div class="masthead">
					<h1>Cocoa<em>Pods</em></h1>
					<p>
						The best way to manage library 
						dependencies in Objective-C 
						projects.
					</p>
				</div>
				<div class="intro">
					<p>
						Specify the libraries for your project in an easy to edit text file. Then use 
						CocoaPods to resolve all dependencies, fetch the source, and set up your 
						Xcode workspace.
					</p>
				</div>
				<nav>
					<ul>
						<li><a href="https://github.com/CocoaPods/CocoaPods">GitHub Repo</a></li>
						<li><a href="https://github.com/CocoaPods/CocoaPods/issues">Submit an issue</a></li>
            <li><a href="https://github.com/CocoaPods/CocoaPods/wiki">Browse the wiki</a></li>
            <li><a href="http://groups.google.com/group/cocoapods">Mailing List</a></li>
					</ul>
				</nav>
			</div>

			<article class="main-content">
				<form class="search-form" id="search" onkeypress="return event.keyCode != 13;">
					<fieldset>
						<h2><label for="pod_search">Search pods</label></h2>
            <select class="platform">
              <optgroup label="Filter for">
                <option value="on:osx on:ios" <%= 'selected' if @platform == :both %>>OS X and iOS</option>
                <option value="on:ios"        <%= 'selected' if @platform == :ios  %>>iOS only</option>
                <option value="on:osx"        <%= 'selected' if @platform == :osx  %>>OS X only</option>
              </optgroup>
            </select>
						<!-- <div class="search-modes">
						              <input type="radio" name="platform" value="on:osx on:ios" id="search_mode_both" checked="<%= @platform == :both %>">
						              <label for="search_mode_both">OS X and iOS</label>
						              <input type="radio" name="platform" value="on:ios" id="search_mode_ios" checked="<%= @platform == :ios %>">
						              <label for="search_mode_ios">iOS</label>
						              <input type="radio" name="platform" value="on:osx" id="search_mode_osx" checked="<%= @platform == :osx %>">
						              <label for="search_mode_osx">OS X</label>
						            </div> -->
						<input type="search" id="pod_search" placeholder="pod name, e.g. Kiwi" class="query" autofocus autocomplete="off">
            <a href="#" class="reset-search" style="display:none">Reset search</a>
					</fieldset>
					<div class="no_results" style="display:none">
						No pods found.
					</div>
					<div class="allocations">
						<ol class="shown"></ol>
						<ol class="mode"></ol>
						<ol class="hidden"></ol>
					</div>
					<div class="results"></div>
				</form>

				<section id="install">
					<h2>Install</h2>
					<p>
						CocoaPods is distributed as a <a href="http://rubygems.org/gems/cocoapods">ruby gem</a>, 
            installing it is as easy as running the following commands in the terminal:
					</p>
<pre class="prettyprint">
$ [sudo] gem install cocoapods
$ pod setup
</pre>
					<p>
						Now that you’ve got CocoaPods installed it’s time to 
						<a href="http://cocoapods.org/#get_started">get started</a>.
					</p>
				</section>

				<section id="get_started">
					<h2>Get started</h2>
					<p>
						Search for pods by name and description.
					</p>
					<p>
						Then list the dependencies in a text file named Podfile in 
						your Xcode project directory:
					</p>
<pre class="prettyprint">
$ vim Podfile
dependency 'JSONKit',       '~> 1.4'
dependency 'Reachability',  '~> 3.0.0'
</pre>
					<p>
						Now you can install the dependencies in your project:
					</p>
<pre class="prettyprint">
$ pod install
</pre>
					<h3>Please note</h3>
					<p>
						Make sure to always open the Xcode workspace instead of the project 
						file when building your project:
					</p>
<pre class="prettyprint">
$ open App.xcworkspace
</pre>
					<h3>How to create a pod</h3>
					<p>
						Sometimes CocoaPods doesn’t yet have a pod for one of your dependencies. 
						Fortunately, creating a pod is pretty easy:
					</p>
<pre class="prettyprint">
$ pod spec create Peanut
$ edit Peanut.podspec
$ pod spec lint Peanut.podspec
</pre>
					<p>
						When you’re done, please <a href="https://github.com/CocoaPods/CocoaPods/issues">create a ticket</a> 
						and upload the pod. You can also fork the <a href="https://github.com/CocoaPods/Specs">CocoaPods specs</a> 
						GitHub repository and send a pull request. We really love contributions!
					</p>
				</section>

				<section id="contribute">
					<h2>Contribute</h2>
					<p>
						We’re developing CocoaPods on GitHub. There’s a repository for the 
						<a href="https://github.com/CocoaPods/CocoaPods">CocoaPods tool</a> and one for the 
						<a href="https://github.com/CocoaPods/Specs">pods specs</a>. It’s easy and really gratifying 
						to contribute patches or pods, you even get push access when one of your specs or patches is accepted.
					</p>
					<p>
						Follow <a href="http://twitter.com/CocoaPodsOrg">CocoaPodsOrg</a> on Twitter to get up to date 
						information about what’s going on in the CocoaPods world.
					</p>
				</section>

				<footer>
          <p>
            Website and search backend (<a href="http://florianhanke.com/picky/">Picky</a>) by <a href="http://twitter.com/hanke">Florian Hanke</a>.
          </p>
          <p>
            Website design by <a href="http://markovics.com/">Philipp Markovics</a>. 
            Website copy by <a href="http://twitter.com/manfreds">Manfred Stienstra</a>. 
            Logo by <a href="http://twitter.com/maxsteenbergen">Max Steenbergen</a>. 
          </p>
          <p>
            CocoaPods is a project from <a href="http://twitter.com/alloy">Eloy Durán</a>
            with contributions from <a href="https://github.com/CocoaPods/CocoaPods/contributors">many others</a>. 
            Sponsored by <a href="http://www.fngtps.com/">Fingertips</a> and <a href="http://www.sauspiel.de/">Sauspiel</a>.
          </p>
				</foooter>
			</article>
		</div>

  	<script type="text/javascript" src="javascripts/jquery-1.5.0.min.js"></script>
  	<script type="text/javascript" src="javascripts/prettify.js"></script>
  	<script type="text/javascript" src="javascripts/history.min.js"></script>
  	<script type="text/javascript" src="javascripts/history.adapter.jquery.min.js"></script>
  	<script type="text/javascript" src="javascripts/picky.min.js"></script>

  	<script type="text/javascript">
  		var platformRemoverRegexp = /(platform|on\:\w+\s?)+/;
      var platformSelect = $("select.platform");
      
      // TODO Add tap gesture support to the cycle button?
      $(window).ready(function() {
        // var searchModes = $(".search-modes");
        //         var activeSearchMode = $('<div class="active-search-mode"></div>');
        //         var searchModeSelector = $('<ul class="search-modes-selector"></ul>').hide();
        //     
        //         searchModes.append(activeSearchMode);
        //         searchModes.append(searchModeSelector);
        // 
        //         searchModes.find("input[type='radio']").each(function() {
        //           var input = $(this);
        //           var option = $('<li></li>').html(input.next("label").html());
        //           searchModeSelector.append(option);
        //           if (input.attr("checked") === true)
        //             option.addClass("active");
        //           option.attr("rel", input.attr("id"));
        //           option.data("input", input);
        //         });
        // 
        //         var selectSearchOption = function(option) {
        //           var input = option.data("input");
        //           searchModeSelector.find("li").removeClass("active");
        //           option.addClass("active");
        //           activeSearchMode.html(option.html());
        //           input.attr("checked", true);
        //           searchModeSelector.hide();
        //           pickyClient.resend();
        //         }
        // 
        //         searchModeSelector.delegate("li", "click", function() {
        //           selectSearchOption($(this));
        //         });
        // 
        //         $(document).click(function(event) {
        //           var target = $(event.target);
        //           if (target.hasClass("active-search-mode")) {
        //             searchModeSelector.show();
        //           } else {
        //             searchModeSelector.hide();
        //           }
        //         });
        //     
        //         activeSearchMode.html(searchModes.find("input[checked=true]").next("label").html());
        // 
        //         $(document).delegate(".results .result", "click", function(event) {
        //           if (event.target && $(event.target).parent(".author").length > 0) {
        //             return;
        //           }
        //           event.preventDefault();
        //           var result = $(this);
        //           location.href = result.find("h3 a").attr("href");
        //         });

        pickyClient = new PickyClient({
          full: '/search',
		  
          // The live query does a full query.
          //
          live: '/search',
          liveResults: 20,
          liveRendered: true, // Experimental: Render live results as if they were full ones.
          liveSearchInterval: 60, // Time between keystrokes before it sends the query.

          // Instead of enclosing the search in #picky,
          // in the CocoaPods search we use #search.
          //
          enclosingSelector: '#search',
          resetSelector: 'a.reset-search',
          maxSuggestions: 4,
          
          // Before a query is inserted into the search field
          // we clean it of any platform terms.
          //
          beforeInsert: function(query) {
            return query.replace(platformRemoverRegexp, '');
          },
          // Before Picky sends any data to the server.
          //
          // Adds the platform modifier to it if it isn't there already.
          // Removes it if it is.
          //
          before: function(query, params) {
            query = query.replace(platformRemoverRegexp, '');
            // var platformModifier = $('#search .search-modes-selector .active').data("input").val();
            var platformModifier = platformSelect.val();
            return platformModifier + ' ' + query;
          },
          // We filter duplicate ids here.
          // (Not in the server as it might be
          // used for APIs etc.)
          //
          success: function(data, query) {
            var seen = {};
            
            var allocations = data.allocations;
            allocations.each(function(i, allocation) {
              var ids     = allocation.ids;
              var entries = allocation.entries;
              var remove = [];
              
              ids.each(function(j, id) {
                if (seen[id]) {
                  data.total -= 1;
                  remove.push(j);
                } else {
                  seen[id] = true;
                }
              });
              
              for(var l = remove.length-1; 0 <= l; l--) {
                entries.splice(remove[l], 1);
              }
              
              allocation.entries = entries;
            });
            
            return data;
          },
          // after: function(data, query) {  }, // After Picky has handled the data and updated the view.

          // This is used to generate the correct query strings, localized. E.g. "subject:war".
          // Note: If you don't give these, the field identifier given in the Picky server is used.
          //
          qualifiers: {
            en:{
              dependencies: 'uses',
              platform: 'on'
            }
          },

          // Use this to group the choices (those are used when Picky needs more feedback).
          // If a category is missing, it is appended in a virtual group at the end.
          // Optional. Default is [].
          //
          //groups: [['author', 'title', 'subjects']],
          // This is used for formatting inside the choice groups.
          //
          // Use %n$s, where n is the position of the category in the key.
          // Optional. Default is {}.
          //
          choices: {
            en: {
              'name,platform': 'named %1$s', // platform is not shown.
              'platform,name': 'named %2$s',
              'author,platform': 'written by %1$s',
              'platform,author': 'written by %2$s',
              'summary,platform': '%1$s in summary',
              'platform,summary': '%2$s in summary',
              'dependencies,platform': 'using %1$s',
              'platform,dependencies': 'using %2$s',
              'platform,author,name': '%3$s, written by %2$s',
              'platform,name,author': '%2$s, written by %3$s',
              'platform,name,version': '%2$s, version %3$s',
              'platform,version,name': '%2$s of %3$s',
              'platform,name,dependencies': '%2$s, using %3$s',
              'platform,dependencies,name': '%2$s used by %3$s',
              'platform,author,dependencies': 'written by %2$s and using %3$s',
              'platform,dependencies,author': 'using %2$s, written by %3$s',
              'platform,dependencies,version': '%2$s used by version %3$s',
              'platform,version,dependencies': '%3$s used by version %2$s',
              'platform,summary,name': '%3$s with \"%2$s\" in summary',
              'platform,name,summary': '%2$s with \"%3$s\" in summary',
              'platform,summary,author': 'written by %3$s with \"%2$s\" in summary',
              'platform,author,summary': 'written by %2$s with \"%3$s\" in summary'
            }
          },

          // This is used to explain the preceding word in the suggestion text (if it
          // has not yet been defined by the choices above), localized. E.g. "Peter (author)".
          // Optional. Default are the field identifiers from the Picky server.
          //
          explanations: {
            en:{
              name: 'named',
              author: 'written by',
              versions: 'version',
              dependencies: 'using',
              summary: 'with summary'
            }
          }
        });
        
        // Resend query on platform selection.
        //
        platformSelect.bind('change', function() {
          $("#pod_search").focus();
          pickyClient.resend();
        });

        // An initial search text, prefilled
        // this one is passed through the query param q.
        //
        // Example: www.mysearch.com/?q=example
        //
        
        // var query = decodeURIComponent(location.search);
        // if (query.indexOf("on:") === -1) {
        //   selectSearchOption($(".search-modes-selector li[rel='search_mode_both']"));
        // }
        // query = query.replace(platformRemoverRegexp, '');
        // query = query.replace("?q=", '');
        
        pickyClient.insertFromURL("<%= @query %>");

        // $('body').addClass($.os.ios ? 'ios' : 'desktop');

        // if ($("#pod_search").val().length > 0) {
        //   $("#reset_search").show();
        // }
      });

      // $(window).load(function() {
      //   prettyPrint();
      // });
  	</script>
  </body>
</html>
